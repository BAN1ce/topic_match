// Code generated by MockGen. DO NOT EDIT.
// Source: .//retry/message_retry.go

// Package retry is a generated GoMock package.
package retry

import (
	reflect "reflect"

	retry "github.com/BAN1ce/skyTree/pkg/retry"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageRetry is a mock of MessageRetry interface.
type MockMessageRetry struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRetryMockRecorder
}

// MockMessageRetryMockRecorder is the mock recorder for MockMessageRetry.
type MockMessageRetryMockRecorder struct {
	mock *MockMessageRetry
}

// NewMockMessageRetry creates a new mock instance.
func NewMockMessageRetry(ctrl *gomock.Controller) *MockMessageRetry {
	mock := &MockMessageRetry{ctrl: ctrl}
	mock.recorder = &MockMessageRetryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRetry) EXPECT() *MockMessageRetryMockRecorder {
	return m.recorder
}

// CreatPublishTask mocks base method.
func (m *MockMessageRetry) CreatPublishTask(task *retry.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatPublishTask", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatPublishTask indicates an expected call of CreatPublishTask.
func (mr *MockMessageRetryMockRecorder) CreatPublishTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatPublishTask", reflect.TypeOf((*MockMessageRetry)(nil).CreatPublishTask), task)
}

// DeleteRetryKey mocks base method.
func (m *MockMessageRetry) DeleteRetryKey(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteRetryKey", key)
}

// DeleteRetryKey indicates an expected call of DeleteRetryKey.
func (mr *MockMessageRetryMockRecorder) DeleteRetryKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetryKey", reflect.TypeOf((*MockMessageRetry)(nil).DeleteRetryKey), key)
}
