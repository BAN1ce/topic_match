// Code generated by MockGen. DO NOT EDIT.
// Source: .//broker/topic/topic.go

// Package topic is a generated GoMock package.
package topic

import (
	context "context"
	reflect "reflect"

	topic "github.com/BAN1ce/skyTree/pkg/broker/topic"
	packet "github.com/BAN1ce/skyTree/pkg/packet"
	packets "github.com/eclipse/paho.golang/packets"
	gomock "github.com/golang/mock/gomock"
)

// MockTopic is a mock of Topic interface.
type MockTopic struct {
	ctrl     *gomock.Controller
	recorder *MockTopicMockRecorder
}

// MockTopicMockRecorder is the mock recorder for MockTopic.
type MockTopicMockRecorder struct {
	mock *MockTopic
}

// NewMockTopic creates a new mock instance.
func NewMockTopic(ctrl *gomock.Controller) *MockTopic {
	mock := &MockTopic{ctrl: ctrl}
	mock.recorder = &MockTopicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopic) EXPECT() *MockTopicMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTopic) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTopicMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTopic)(nil).Close))
}

// GetUnFinishedMessage mocks base method.
func (m *MockTopic) GetUnFinishedMessage() []*packet.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnFinishedMessage")
	ret0, _ := ret[0].([]*packet.Message)
	return ret0
}

// GetUnFinishedMessage indicates an expected call of GetUnFinishedMessage.
func (mr *MockTopicMockRecorder) GetUnFinishedMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnFinishedMessage", reflect.TypeOf((*MockTopic)(nil).GetUnFinishedMessage))
}

// Meta mocks base method.
func (m *MockTopic) Meta() topic.Meta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(topic.Meta)
	return ret0
}

// Meta indicates an expected call of Meta.
func (mr *MockTopicMockRecorder) Meta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockTopic)(nil).Meta))
}

// Publish mocks base method.
func (m *MockTopic) Publish(publish *packet.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", publish)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockTopicMockRecorder) Publish(publish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockTopic)(nil).Publish), publish)
}

// Start mocks base method.
func (m *MockTopic) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockTopicMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTopic)(nil).Start), ctx)
}

// MockQoS0Subscriber is a mock of QoS0Subscriber interface.
type MockQoS0Subscriber struct {
	ctrl     *gomock.Controller
	recorder *MockQoS0SubscriberMockRecorder
}

// MockQoS0SubscriberMockRecorder is the mock recorder for MockQoS0Subscriber.
type MockQoS0SubscriberMockRecorder struct {
	mock *MockQoS0Subscriber
}

// NewMockQoS0Subscriber creates a new mock instance.
func NewMockQoS0Subscriber(ctrl *gomock.Controller) *MockQoS0Subscriber {
	mock := &MockQoS0Subscriber{ctrl: ctrl}
	mock.recorder = &MockQoS0SubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQoS0Subscriber) EXPECT() *MockQoS0SubscriberMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockQoS0Subscriber) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockQoS0SubscriberMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockQoS0Subscriber)(nil).Close))
}

// GetUnFinishedMessage mocks base method.
func (m *MockQoS0Subscriber) GetUnFinishedMessage() []*packet.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnFinishedMessage")
	ret0, _ := ret[0].([]*packet.Message)
	return ret0
}

// GetUnFinishedMessage indicates an expected call of GetUnFinishedMessage.
func (mr *MockQoS0SubscriberMockRecorder) GetUnFinishedMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnFinishedMessage", reflect.TypeOf((*MockQoS0Subscriber)(nil).GetUnFinishedMessage))
}

// Meta mocks base method.
func (m *MockQoS0Subscriber) Meta() topic.Meta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(topic.Meta)
	return ret0
}

// Meta indicates an expected call of Meta.
func (mr *MockQoS0SubscriberMockRecorder) Meta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockQoS0Subscriber)(nil).Meta))
}

// Publish mocks base method.
func (m *MockQoS0Subscriber) Publish(publish *packet.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", publish)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockQoS0SubscriberMockRecorder) Publish(publish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockQoS0Subscriber)(nil).Publish), publish)
}

// Start mocks base method.
func (m *MockQoS0Subscriber) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockQoS0SubscriberMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockQoS0Subscriber)(nil).Start), ctx)
}

// MockQoS1Subscriber is a mock of QoS1Subscriber interface.
type MockQoS1Subscriber struct {
	ctrl     *gomock.Controller
	recorder *MockQoS1SubscriberMockRecorder
}

// MockQoS1SubscriberMockRecorder is the mock recorder for MockQoS1Subscriber.
type MockQoS1SubscriberMockRecorder struct {
	mock *MockQoS1Subscriber
}

// NewMockQoS1Subscriber creates a new mock instance.
func NewMockQoS1Subscriber(ctrl *gomock.Controller) *MockQoS1Subscriber {
	mock := &MockQoS1Subscriber{ctrl: ctrl}
	mock.recorder = &MockQoS1SubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQoS1Subscriber) EXPECT() *MockQoS1SubscriberMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockQoS1Subscriber) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockQoS1SubscriberMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockQoS1Subscriber)(nil).Close))
}

// GetUnFinishedMessage mocks base method.
func (m *MockQoS1Subscriber) GetUnFinishedMessage() []*packet.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnFinishedMessage")
	ret0, _ := ret[0].([]*packet.Message)
	return ret0
}

// GetUnFinishedMessage indicates an expected call of GetUnFinishedMessage.
func (mr *MockQoS1SubscriberMockRecorder) GetUnFinishedMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnFinishedMessage", reflect.TypeOf((*MockQoS1Subscriber)(nil).GetUnFinishedMessage))
}

// HandlePublishAck mocks base method.
func (m *MockQoS1Subscriber) HandlePublishAck(puback *packets.Puback) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePublishAck", puback)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandlePublishAck indicates an expected call of HandlePublishAck.
func (mr *MockQoS1SubscriberMockRecorder) HandlePublishAck(puback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePublishAck", reflect.TypeOf((*MockQoS1Subscriber)(nil).HandlePublishAck), puback)
}

// Meta mocks base method.
func (m *MockQoS1Subscriber) Meta() topic.Meta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(topic.Meta)
	return ret0
}

// Meta indicates an expected call of Meta.
func (mr *MockQoS1SubscriberMockRecorder) Meta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockQoS1Subscriber)(nil).Meta))
}

// Publish mocks base method.
func (m *MockQoS1Subscriber) Publish(publish *packet.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", publish)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockQoS1SubscriberMockRecorder) Publish(publish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockQoS1Subscriber)(nil).Publish), publish)
}

// Start mocks base method.
func (m *MockQoS1Subscriber) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockQoS1SubscriberMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockQoS1Subscriber)(nil).Start), ctx)
}

// MockQoS2Subscriber is a mock of QoS2Subscriber interface.
type MockQoS2Subscriber struct {
	ctrl     *gomock.Controller
	recorder *MockQoS2SubscriberMockRecorder
}

// MockQoS2SubscriberMockRecorder is the mock recorder for MockQoS2Subscriber.
type MockQoS2SubscriberMockRecorder struct {
	mock *MockQoS2Subscriber
}

// NewMockQoS2Subscriber creates a new mock instance.
func NewMockQoS2Subscriber(ctrl *gomock.Controller) *MockQoS2Subscriber {
	mock := &MockQoS2Subscriber{ctrl: ctrl}
	mock.recorder = &MockQoS2SubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQoS2Subscriber) EXPECT() *MockQoS2SubscriberMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockQoS2Subscriber) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockQoS2SubscriberMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockQoS2Subscriber)(nil).Close))
}

// GetUnFinishedMessage mocks base method.
func (m *MockQoS2Subscriber) GetUnFinishedMessage() []*packet.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnFinishedMessage")
	ret0, _ := ret[0].([]*packet.Message)
	return ret0
}

// GetUnFinishedMessage indicates an expected call of GetUnFinishedMessage.
func (mr *MockQoS2SubscriberMockRecorder) GetUnFinishedMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnFinishedMessage", reflect.TypeOf((*MockQoS2Subscriber)(nil).GetUnFinishedMessage))
}

// HandlePublishComp mocks base method.
func (m *MockQoS2Subscriber) HandlePublishComp(pubcomp *packets.Pubcomp) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePublishComp", pubcomp)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandlePublishComp indicates an expected call of HandlePublishComp.
func (mr *MockQoS2SubscriberMockRecorder) HandlePublishComp(pubcomp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePublishComp", reflect.TypeOf((*MockQoS2Subscriber)(nil).HandlePublishComp), pubcomp)
}

// HandlePublishRec mocks base method.
func (m *MockQoS2Subscriber) HandlePublishRec(pubrec *packets.Pubrec) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePublishRec", pubrec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandlePublishRec indicates an expected call of HandlePublishRec.
func (mr *MockQoS2SubscriberMockRecorder) HandlePublishRec(pubrec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePublishRec", reflect.TypeOf((*MockQoS2Subscriber)(nil).HandlePublishRec), pubrec)
}

// Meta mocks base method.
func (m *MockQoS2Subscriber) Meta() topic.Meta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(topic.Meta)
	return ret0
}

// Meta indicates an expected call of Meta.
func (mr *MockQoS2SubscriberMockRecorder) Meta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockQoS2Subscriber)(nil).Meta))
}

// Publish mocks base method.
func (m *MockQoS2Subscriber) Publish(publish *packet.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", publish)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockQoS2SubscriberMockRecorder) Publish(publish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockQoS2Subscriber)(nil).Publish), publish)
}

// Start mocks base method.
func (m *MockQoS2Subscriber) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockQoS2SubscriberMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockQoS2Subscriber)(nil).Start), ctx)
}
