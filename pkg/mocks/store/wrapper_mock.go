// Code generated by MockGen. DO NOT EDIT.
// Source: .//broker/store/wrapper.go

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	packet "github.com/BAN1ce/skyTree/pkg/packet"
	gomock "github.com/golang/mock/gomock"
)

// MockWrapper is a mock of Wrapper interface.
type MockWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockWrapperMockRecorder
}

// MockWrapperMockRecorder is the mock recorder for MockWrapper.
type MockWrapperMockRecorder struct {
	mock *MockWrapper
}

// NewMockWrapper creates a new mock instance.
func NewMockWrapper(ctrl *gomock.Controller) *MockWrapper {
	mock := &MockWrapper{ctrl: ctrl}
	mock.recorder = &MockWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWrapper) EXPECT() *MockWrapperMockRecorder {
	return m.recorder
}

// StorePublishPacket mocks base method.
func (m *MockWrapper) StorePublishPacket(topics map[string]int32, packet *packet.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePublishPacket", topics, packet)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorePublishPacket indicates an expected call of StorePublishPacket.
func (mr *MockWrapperMockRecorder) StorePublishPacket(topics, packet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePublishPacket", reflect.TypeOf((*MockWrapper)(nil).StorePublishPacket), topics, packet)
}
