// Code generated by MockGen. DO NOT EDIT.
// Source: .//broker/store/store.go

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKeyStore is a mock of KeyStore interface.
type MockKeyStore struct {
	ctrl     *gomock.Controller
	recorder *MockKeyStoreMockRecorder
}

// MockKeyStoreMockRecorder is the mock recorder for MockKeyStore.
type MockKeyStoreMockRecorder struct {
	mock *MockKeyStore
}

// NewMockKeyStore creates a new mock instance.
func NewMockKeyStore(ctrl *gomock.Controller) *MockKeyStore {
	mock := &MockKeyStore{ctrl: ctrl}
	mock.recorder = &MockKeyStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyStore) EXPECT() *MockKeyStoreMockRecorder {
	return m.recorder
}

// DeleteKey mocks base method.
func (m *MockKeyStore) DeleteKey(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockKeyStoreMockRecorder) DeleteKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockKeyStore)(nil).DeleteKey), ctx, key)
}

// DeletePrefixKey mocks base method.
func (m *MockKeyStore) DeletePrefixKey(ctx context.Context, prefix string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrefixKey", ctx, prefix)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePrefixKey indicates an expected call of DeletePrefixKey.
func (mr *MockKeyStoreMockRecorder) DeletePrefixKey(ctx, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrefixKey", reflect.TypeOf((*MockKeyStore)(nil).DeletePrefixKey), ctx, prefix)
}

// PutKey mocks base method.
func (m *MockKeyStore) PutKey(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutKey", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutKey indicates an expected call of PutKey.
func (mr *MockKeyStoreMockRecorder) PutKey(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutKey", reflect.TypeOf((*MockKeyStore)(nil).PutKey), ctx, key, value)
}

// ReadKey mocks base method.
func (m *MockKeyStore) ReadKey(ctx context.Context, key string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadKey", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadKey indicates an expected call of ReadKey.
func (mr *MockKeyStoreMockRecorder) ReadKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadKey", reflect.TypeOf((*MockKeyStore)(nil).ReadKey), ctx, key)
}

// ReadPrefixKey mocks base method.
func (m *MockKeyStore) ReadPrefixKey(ctx context.Context, prefix string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPrefixKey", ctx, prefix)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPrefixKey indicates an expected call of ReadPrefixKey.
func (mr *MockKeyStoreMockRecorder) ReadPrefixKey(ctx, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPrefixKey", reflect.TypeOf((*MockKeyStore)(nil).ReadPrefixKey), ctx, prefix)
}

// ZAdd mocks base method.
func (m *MockKeyStore) ZAdd(ctx context.Context, key, member string, score float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZAdd", ctx, key, member, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZAdd indicates an expected call of ZAdd.
func (mr *MockKeyStoreMockRecorder) ZAdd(ctx, key, member, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAdd", reflect.TypeOf((*MockKeyStore)(nil).ZAdd), ctx, key, member, score)
}

// ZDel mocks base method.
func (m *MockKeyStore) ZDel(ctx context.Context, key, member string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZDel", ctx, key, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZDel indicates an expected call of ZDel.
func (mr *MockKeyStoreMockRecorder) ZDel(ctx, key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZDel", reflect.TypeOf((*MockKeyStore)(nil).ZDel), ctx, key, member)
}

// ZRange mocks base method.
func (m *MockKeyStore) ZRange(ctx context.Context, key string, start, end float64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRange", ctx, key, start, end)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRange indicates an expected call of ZRange.
func (mr *MockKeyStoreMockRecorder) ZRange(ctx, key, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRange", reflect.TypeOf((*MockKeyStore)(nil).ZRange), ctx, key, start, end)
}

// MockHashStore is a mock of HashStore interface.
type MockHashStore struct {
	ctrl     *gomock.Controller
	recorder *MockHashStoreMockRecorder
}

// MockHashStoreMockRecorder is the mock recorder for MockHashStore.
type MockHashStoreMockRecorder struct {
	mock *MockHashStore
}

// NewMockHashStore creates a new mock instance.
func NewMockHashStore(ctrl *gomock.Controller) *MockHashStore {
	mock := &MockHashStore{ctrl: ctrl}
	mock.recorder = &MockHashStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashStore) EXPECT() *MockHashStoreMockRecorder {
	return m.recorder
}

// DeleteKey mocks base method.
func (m *MockHashStore) DeleteKey(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockHashStoreMockRecorder) DeleteKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockHashStore)(nil).DeleteKey), ctx, key)
}

// DeletePrefixKey mocks base method.
func (m *MockHashStore) DeletePrefixKey(ctx context.Context, prefix string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrefixKey", ctx, prefix)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePrefixKey indicates an expected call of DeletePrefixKey.
func (mr *MockHashStoreMockRecorder) DeletePrefixKey(ctx, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrefixKey", reflect.TypeOf((*MockHashStore)(nil).DeletePrefixKey), ctx, prefix)
}

// PutKey mocks base method.
func (m *MockHashStore) PutKey(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutKey", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutKey indicates an expected call of PutKey.
func (mr *MockHashStoreMockRecorder) PutKey(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutKey", reflect.TypeOf((*MockHashStore)(nil).PutKey), ctx, key, value)
}

// ReadKey mocks base method.
func (m *MockHashStore) ReadKey(ctx context.Context, key string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadKey", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadKey indicates an expected call of ReadKey.
func (mr *MockHashStoreMockRecorder) ReadKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadKey", reflect.TypeOf((*MockHashStore)(nil).ReadKey), ctx, key)
}

// ReadPrefixKey mocks base method.
func (m *MockHashStore) ReadPrefixKey(ctx context.Context, prefix string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPrefixKey", ctx, prefix)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPrefixKey indicates an expected call of ReadPrefixKey.
func (mr *MockHashStoreMockRecorder) ReadPrefixKey(ctx, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPrefixKey", reflect.TypeOf((*MockHashStore)(nil).ReadPrefixKey), ctx, prefix)
}

// MockZSetStore is a mock of ZSetStore interface.
type MockZSetStore struct {
	ctrl     *gomock.Controller
	recorder *MockZSetStoreMockRecorder
}

// MockZSetStoreMockRecorder is the mock recorder for MockZSetStore.
type MockZSetStoreMockRecorder struct {
	mock *MockZSetStore
}

// NewMockZSetStore creates a new mock instance.
func NewMockZSetStore(ctrl *gomock.Controller) *MockZSetStore {
	mock := &MockZSetStore{ctrl: ctrl}
	mock.recorder = &MockZSetStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZSetStore) EXPECT() *MockZSetStoreMockRecorder {
	return m.recorder
}

// ZAdd mocks base method.
func (m *MockZSetStore) ZAdd(ctx context.Context, key, member string, score float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZAdd", ctx, key, member, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZAdd indicates an expected call of ZAdd.
func (mr *MockZSetStoreMockRecorder) ZAdd(ctx, key, member, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAdd", reflect.TypeOf((*MockZSetStore)(nil).ZAdd), ctx, key, member, score)
}

// ZDel mocks base method.
func (m *MockZSetStore) ZDel(ctx context.Context, key, member string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZDel", ctx, key, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZDel indicates an expected call of ZDel.
func (mr *MockZSetStoreMockRecorder) ZDel(ctx, key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZDel", reflect.TypeOf((*MockZSetStore)(nil).ZDel), ctx, key, member)
}

// ZRange mocks base method.
func (m *MockZSetStore) ZRange(ctx context.Context, key string, start, end float64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRange", ctx, key, start, end)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRange indicates an expected call of ZRange.
func (mr *MockZSetStoreMockRecorder) ZRange(ctx, key, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRange", reflect.TypeOf((*MockZSetStore)(nil).ZRange), ctx, key, start, end)
}
