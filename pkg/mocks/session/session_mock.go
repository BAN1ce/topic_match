// Code generated by MockGen. DO NOT EDIT.
// Source: .//broker/session/session.go

// Package session is a generated GoMock package.
package session

import (
	reflect "reflect"

	session "github.com/BAN1ce/skyTree/pkg/broker/session"
	topic "github.com/BAN1ce/skyTree/pkg/broker/topic"
	packet "github.com/BAN1ce/skyTree/pkg/packet"
	gomock "github.com/golang/mock/gomock"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// CreateSubTopic mocks base method.
func (m *MockSession) CreateSubTopic(meta *topic.Meta) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateSubTopic", meta)
}

// CreateSubTopic indicates an expected call of CreateSubTopic.
func (mr *MockSessionMockRecorder) CreateSubTopic(meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubTopic", reflect.TypeOf((*MockSession)(nil).CreateSubTopic), meta)
}

// CreateTopicUnFinishedMessage mocks base method.
func (m *MockSession) CreateTopicUnFinishedMessage(topic string, message []*packet.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateTopicUnFinishedMessage", topic, message)
}

// CreateTopicUnFinishedMessage indicates an expected call of CreateTopicUnFinishedMessage.
func (mr *MockSessionMockRecorder) CreateTopicUnFinishedMessage(topic, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopicUnFinishedMessage", reflect.TypeOf((*MockSession)(nil).CreateTopicUnFinishedMessage), topic, message)
}

// DeleteSubTopic mocks base method.
func (m *MockSession) DeleteSubTopic(topic string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteSubTopic", topic)
}

// DeleteSubTopic indicates an expected call of DeleteSubTopic.
func (mr *MockSessionMockRecorder) DeleteSubTopic(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubTopic", reflect.TypeOf((*MockSession)(nil).DeleteSubTopic), topic)
}

// DeleteTopicLatestPushedMessageID mocks base method.
func (m *MockSession) DeleteTopicLatestPushedMessageID(topic, messageID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteTopicLatestPushedMessageID", topic, messageID)
}

// DeleteTopicLatestPushedMessageID indicates an expected call of DeleteTopicLatestPushedMessageID.
func (mr *MockSessionMockRecorder) DeleteTopicLatestPushedMessageID(topic, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicLatestPushedMessageID", reflect.TypeOf((*MockSession)(nil).DeleteTopicLatestPushedMessageID), topic, messageID)
}

// DeleteTopicUnFinishedMessage mocks base method.
func (m *MockSession) DeleteTopicUnFinishedMessage(topic, messageID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteTopicUnFinishedMessage", topic, messageID)
}

// DeleteTopicUnFinishedMessage indicates an expected call of DeleteTopicUnFinishedMessage.
func (mr *MockSessionMockRecorder) DeleteTopicUnFinishedMessage(topic, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicUnFinishedMessage", reflect.TypeOf((*MockSession)(nil).DeleteTopicUnFinishedMessage), topic, messageID)
}

// DeleteWillMessage mocks base method.
func (m *MockSession) DeleteWillMessage() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWillMessage")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWillMessage indicates an expected call of DeleteWillMessage.
func (mr *MockSessionMockRecorder) DeleteWillMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWillMessage", reflect.TypeOf((*MockSession)(nil).DeleteWillMessage))
}

// GetConnectProperties mocks base method.
func (m *MockSession) GetConnectProperties() (*session.ConnectProperties, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectProperties")
	ret0, _ := ret[0].(*session.ConnectProperties)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectProperties indicates an expected call of GetConnectProperties.
func (mr *MockSessionMockRecorder) GetConnectProperties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectProperties", reflect.TypeOf((*MockSession)(nil).GetConnectProperties))
}

// GetExpiryInterval mocks base method.
func (m *MockSession) GetExpiryInterval() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiryInterval")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetExpiryInterval indicates an expected call of GetExpiryInterval.
func (mr *MockSessionMockRecorder) GetExpiryInterval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiryInterval", reflect.TypeOf((*MockSession)(nil).GetExpiryInterval))
}

// GetWillMessage mocks base method.
func (m *MockSession) GetWillMessage() (*session.WillMessage, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWillMessage")
	ret0, _ := ret[0].(*session.WillMessage)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWillMessage indicates an expected call of GetWillMessage.
func (mr *MockSessionMockRecorder) GetWillMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWillMessage", reflect.TypeOf((*MockSession)(nil).GetWillMessage))
}

// ReadSubTopics mocks base method.
func (m *MockSession) ReadSubTopics() []*topic.Meta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSubTopics")
	ret0, _ := ret[0].([]*topic.Meta)
	return ret0
}

// ReadSubTopics indicates an expected call of ReadSubTopics.
func (mr *MockSessionMockRecorder) ReadSubTopics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSubTopics", reflect.TypeOf((*MockSession)(nil).ReadSubTopics))
}

// ReadTopicLatestPushedMessageID mocks base method.
func (m *MockSession) ReadTopicLatestPushedMessageID(topic string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTopicLatestPushedMessageID", topic)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ReadTopicLatestPushedMessageID indicates an expected call of ReadTopicLatestPushedMessageID.
func (mr *MockSessionMockRecorder) ReadTopicLatestPushedMessageID(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTopicLatestPushedMessageID", reflect.TypeOf((*MockSession)(nil).ReadTopicLatestPushedMessageID), topic)
}

// ReadTopicUnFinishedMessage mocks base method.
func (m *MockSession) ReadTopicUnFinishedMessage(topic string) []*packet.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTopicUnFinishedMessage", topic)
	ret0, _ := ret[0].([]*packet.Message)
	return ret0
}

// ReadTopicUnFinishedMessage indicates an expected call of ReadTopicUnFinishedMessage.
func (mr *MockSessionMockRecorder) ReadTopicUnFinishedMessage(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTopicUnFinishedMessage", reflect.TypeOf((*MockSession)(nil).ReadTopicUnFinishedMessage), topic)
}

// Release mocks base method.
func (m *MockSession) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release.
func (mr *MockSessionMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockSession)(nil).Release))
}

// SetConnectProperties mocks base method.
func (m *MockSession) SetConnectProperties(properties *session.ConnectProperties) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConnectProperties", properties)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConnectProperties indicates an expected call of SetConnectProperties.
func (mr *MockSessionMockRecorder) SetConnectProperties(properties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnectProperties", reflect.TypeOf((*MockSession)(nil).SetConnectProperties), properties)
}

// SetExpiryInterval mocks base method.
func (m *MockSession) SetExpiryInterval(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExpiryInterval", arg0)
}

// SetExpiryInterval indicates an expected call of SetExpiryInterval.
func (mr *MockSessionMockRecorder) SetExpiryInterval(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpiryInterval", reflect.TypeOf((*MockSession)(nil).SetExpiryInterval), arg0)
}

// SetTopicLatestPushedMessageID mocks base method.
func (m *MockSession) SetTopicLatestPushedMessageID(topic, messageID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTopicLatestPushedMessageID", topic, messageID)
}

// SetTopicLatestPushedMessageID indicates an expected call of SetTopicLatestPushedMessageID.
func (mr *MockSessionMockRecorder) SetTopicLatestPushedMessageID(topic, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTopicLatestPushedMessageID", reflect.TypeOf((*MockSession)(nil).SetTopicLatestPushedMessageID), topic, messageID)
}

// SetWillMessage mocks base method.
func (m *MockSession) SetWillMessage(message *session.WillMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWillMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWillMessage indicates an expected call of SetWillMessage.
func (mr *MockSessionMockRecorder) SetWillMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWillMessage", reflect.TypeOf((*MockSession)(nil).SetWillMessage), message)
}

// MockTopicManager is a mock of TopicManager interface.
type MockTopicManager struct {
	ctrl     *gomock.Controller
	recorder *MockTopicManagerMockRecorder
}

// MockTopicManagerMockRecorder is the mock recorder for MockTopicManager.
type MockTopicManagerMockRecorder struct {
	mock *MockTopicManager
}

// NewMockTopicManager creates a new mock instance.
func NewMockTopicManager(ctrl *gomock.Controller) *MockTopicManager {
	mock := &MockTopicManager{ctrl: ctrl}
	mock.recorder = &MockTopicManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicManager) EXPECT() *MockTopicManagerMockRecorder {
	return m.recorder
}

// CreateSubTopic mocks base method.
func (m *MockTopicManager) CreateSubTopic(meta *topic.Meta) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateSubTopic", meta)
}

// CreateSubTopic indicates an expected call of CreateSubTopic.
func (mr *MockTopicManagerMockRecorder) CreateSubTopic(meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubTopic", reflect.TypeOf((*MockTopicManager)(nil).CreateSubTopic), meta)
}

// CreateTopicUnFinishedMessage mocks base method.
func (m *MockTopicManager) CreateTopicUnFinishedMessage(topic string, message []*packet.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateTopicUnFinishedMessage", topic, message)
}

// CreateTopicUnFinishedMessage indicates an expected call of CreateTopicUnFinishedMessage.
func (mr *MockTopicManagerMockRecorder) CreateTopicUnFinishedMessage(topic, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopicUnFinishedMessage", reflect.TypeOf((*MockTopicManager)(nil).CreateTopicUnFinishedMessage), topic, message)
}

// DeleteSubTopic mocks base method.
func (m *MockTopicManager) DeleteSubTopic(topic string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteSubTopic", topic)
}

// DeleteSubTopic indicates an expected call of DeleteSubTopic.
func (mr *MockTopicManagerMockRecorder) DeleteSubTopic(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubTopic", reflect.TypeOf((*MockTopicManager)(nil).DeleteSubTopic), topic)
}

// DeleteTopicLatestPushedMessageID mocks base method.
func (m *MockTopicManager) DeleteTopicLatestPushedMessageID(topic, messageID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteTopicLatestPushedMessageID", topic, messageID)
}

// DeleteTopicLatestPushedMessageID indicates an expected call of DeleteTopicLatestPushedMessageID.
func (mr *MockTopicManagerMockRecorder) DeleteTopicLatestPushedMessageID(topic, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicLatestPushedMessageID", reflect.TypeOf((*MockTopicManager)(nil).DeleteTopicLatestPushedMessageID), topic, messageID)
}

// DeleteTopicUnFinishedMessage mocks base method.
func (m *MockTopicManager) DeleteTopicUnFinishedMessage(topic, messageID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteTopicUnFinishedMessage", topic, messageID)
}

// DeleteTopicUnFinishedMessage indicates an expected call of DeleteTopicUnFinishedMessage.
func (mr *MockTopicManagerMockRecorder) DeleteTopicUnFinishedMessage(topic, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicUnFinishedMessage", reflect.TypeOf((*MockTopicManager)(nil).DeleteTopicUnFinishedMessage), topic, messageID)
}

// ReadSubTopics mocks base method.
func (m *MockTopicManager) ReadSubTopics() []*topic.Meta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSubTopics")
	ret0, _ := ret[0].([]*topic.Meta)
	return ret0
}

// ReadSubTopics indicates an expected call of ReadSubTopics.
func (mr *MockTopicManagerMockRecorder) ReadSubTopics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSubTopics", reflect.TypeOf((*MockTopicManager)(nil).ReadSubTopics))
}

// ReadTopicLatestPushedMessageID mocks base method.
func (m *MockTopicManager) ReadTopicLatestPushedMessageID(topic string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTopicLatestPushedMessageID", topic)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ReadTopicLatestPushedMessageID indicates an expected call of ReadTopicLatestPushedMessageID.
func (mr *MockTopicManagerMockRecorder) ReadTopicLatestPushedMessageID(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTopicLatestPushedMessageID", reflect.TypeOf((*MockTopicManager)(nil).ReadTopicLatestPushedMessageID), topic)
}

// ReadTopicUnFinishedMessage mocks base method.
func (m *MockTopicManager) ReadTopicUnFinishedMessage(topic string) []*packet.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTopicUnFinishedMessage", topic)
	ret0, _ := ret[0].([]*packet.Message)
	return ret0
}

// ReadTopicUnFinishedMessage indicates an expected call of ReadTopicUnFinishedMessage.
func (mr *MockTopicManagerMockRecorder) ReadTopicUnFinishedMessage(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTopicUnFinishedMessage", reflect.TypeOf((*MockTopicManager)(nil).ReadTopicUnFinishedMessage), topic)
}

// SetTopicLatestPushedMessageID mocks base method.
func (m *MockTopicManager) SetTopicLatestPushedMessageID(topic, messageID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTopicLatestPushedMessageID", topic, messageID)
}

// SetTopicLatestPushedMessageID indicates an expected call of SetTopicLatestPushedMessageID.
func (mr *MockTopicManagerMockRecorder) SetTopicLatestPushedMessageID(topic, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTopicLatestPushedMessageID", reflect.TypeOf((*MockTopicManager)(nil).SetTopicLatestPushedMessageID), topic, messageID)
}

// MockTopicUnFinishedMessage is a mock of TopicUnFinishedMessage interface.
type MockTopicUnFinishedMessage struct {
	ctrl     *gomock.Controller
	recorder *MockTopicUnFinishedMessageMockRecorder
}

// MockTopicUnFinishedMessageMockRecorder is the mock recorder for MockTopicUnFinishedMessage.
type MockTopicUnFinishedMessageMockRecorder struct {
	mock *MockTopicUnFinishedMessage
}

// NewMockTopicUnFinishedMessage creates a new mock instance.
func NewMockTopicUnFinishedMessage(ctrl *gomock.Controller) *MockTopicUnFinishedMessage {
	mock := &MockTopicUnFinishedMessage{ctrl: ctrl}
	mock.recorder = &MockTopicUnFinishedMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicUnFinishedMessage) EXPECT() *MockTopicUnFinishedMessageMockRecorder {
	return m.recorder
}

// CreateTopicUnFinishedMessage mocks base method.
func (m *MockTopicUnFinishedMessage) CreateTopicUnFinishedMessage(topic string, message []*packet.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateTopicUnFinishedMessage", topic, message)
}

// CreateTopicUnFinishedMessage indicates an expected call of CreateTopicUnFinishedMessage.
func (mr *MockTopicUnFinishedMessageMockRecorder) CreateTopicUnFinishedMessage(topic, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopicUnFinishedMessage", reflect.TypeOf((*MockTopicUnFinishedMessage)(nil).CreateTopicUnFinishedMessage), topic, message)
}

// DeleteTopicUnFinishedMessage mocks base method.
func (m *MockTopicUnFinishedMessage) DeleteTopicUnFinishedMessage(topic, messageID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteTopicUnFinishedMessage", topic, messageID)
}

// DeleteTopicUnFinishedMessage indicates an expected call of DeleteTopicUnFinishedMessage.
func (mr *MockTopicUnFinishedMessageMockRecorder) DeleteTopicUnFinishedMessage(topic, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicUnFinishedMessage", reflect.TypeOf((*MockTopicUnFinishedMessage)(nil).DeleteTopicUnFinishedMessage), topic, messageID)
}

// ReadTopicUnFinishedMessage mocks base method.
func (m *MockTopicUnFinishedMessage) ReadTopicUnFinishedMessage(topic string) []*packet.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTopicUnFinishedMessage", topic)
	ret0, _ := ret[0].([]*packet.Message)
	return ret0
}

// ReadTopicUnFinishedMessage indicates an expected call of ReadTopicUnFinishedMessage.
func (mr *MockTopicUnFinishedMessageMockRecorder) ReadTopicUnFinishedMessage(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTopicUnFinishedMessage", reflect.TypeOf((*MockTopicUnFinishedMessage)(nil).ReadTopicUnFinishedMessage), topic)
}

// MockTopicLatestPushedMessage is a mock of TopicLatestPushedMessage interface.
type MockTopicLatestPushedMessage struct {
	ctrl     *gomock.Controller
	recorder *MockTopicLatestPushedMessageMockRecorder
}

// MockTopicLatestPushedMessageMockRecorder is the mock recorder for MockTopicLatestPushedMessage.
type MockTopicLatestPushedMessageMockRecorder struct {
	mock *MockTopicLatestPushedMessage
}

// NewMockTopicLatestPushedMessage creates a new mock instance.
func NewMockTopicLatestPushedMessage(ctrl *gomock.Controller) *MockTopicLatestPushedMessage {
	mock := &MockTopicLatestPushedMessage{ctrl: ctrl}
	mock.recorder = &MockTopicLatestPushedMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicLatestPushedMessage) EXPECT() *MockTopicLatestPushedMessageMockRecorder {
	return m.recorder
}

// DeleteTopicLatestPushedMessageID mocks base method.
func (m *MockTopicLatestPushedMessage) DeleteTopicLatestPushedMessageID(topic, messageID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteTopicLatestPushedMessageID", topic, messageID)
}

// DeleteTopicLatestPushedMessageID indicates an expected call of DeleteTopicLatestPushedMessageID.
func (mr *MockTopicLatestPushedMessageMockRecorder) DeleteTopicLatestPushedMessageID(topic, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicLatestPushedMessageID", reflect.TypeOf((*MockTopicLatestPushedMessage)(nil).DeleteTopicLatestPushedMessageID), topic, messageID)
}

// ReadTopicLatestPushedMessageID mocks base method.
func (m *MockTopicLatestPushedMessage) ReadTopicLatestPushedMessageID(topic string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTopicLatestPushedMessageID", topic)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ReadTopicLatestPushedMessageID indicates an expected call of ReadTopicLatestPushedMessageID.
func (mr *MockTopicLatestPushedMessageMockRecorder) ReadTopicLatestPushedMessageID(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTopicLatestPushedMessageID", reflect.TypeOf((*MockTopicLatestPushedMessage)(nil).ReadTopicLatestPushedMessageID), topic)
}

// SetTopicLatestPushedMessageID mocks base method.
func (m *MockTopicLatestPushedMessage) SetTopicLatestPushedMessageID(topic, messageID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTopicLatestPushedMessageID", topic, messageID)
}

// SetTopicLatestPushedMessageID indicates an expected call of SetTopicLatestPushedMessageID.
func (mr *MockTopicLatestPushedMessageMockRecorder) SetTopicLatestPushedMessageID(topic, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTopicLatestPushedMessageID", reflect.TypeOf((*MockTopicLatestPushedMessage)(nil).SetTopicLatestPushedMessageID), topic, messageID)
}
