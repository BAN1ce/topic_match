// Code generated by MockGen. DO NOT EDIT.
// Source: .//broker/session/manager.go

// Package session is a generated GoMock package.
package session

import (
	context "context"
	reflect "reflect"

	session "github.com/BAN1ce/skyTree/pkg/broker/session"
	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// AddClientSession mocks base method.
func (m *MockManager) AddClientSession(ctx context.Context, clientID string, session session.Session) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddClientSession", ctx, clientID, session)
}

// AddClientSession indicates an expected call of AddClientSession.
func (mr *MockManagerMockRecorder) AddClientSession(ctx, clientID, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientSession", reflect.TypeOf((*MockManager)(nil).AddClientSession), ctx, clientID, session)
}

// NewClientSession mocks base method.
func (m *MockManager) NewClientSession(ctx context.Context, clientID string) session.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClientSession", ctx, clientID)
	ret0, _ := ret[0].(session.Session)
	return ret0
}

// NewClientSession indicates an expected call of NewClientSession.
func (mr *MockManagerMockRecorder) NewClientSession(ctx, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClientSession", reflect.TypeOf((*MockManager)(nil).NewClientSession), ctx, clientID)
}

// ReadClientSession mocks base method.
func (m *MockManager) ReadClientSession(ctx context.Context, clientID string) (session.Session, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadClientSession", ctx, clientID)
	ret0, _ := ret[0].(session.Session)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ReadClientSession indicates an expected call of ReadClientSession.
func (mr *MockManagerMockRecorder) ReadClientSession(ctx, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadClientSession", reflect.TypeOf((*MockManager)(nil).ReadClientSession), ctx, clientID)
}
