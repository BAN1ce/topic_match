// Code generated by MockGen. DO NOT EDIT.
// Source: .//broker/message_store.go

// Package broker is a generated GoMock package.
package broker

import (
	bytes "bytes"
	context "context"
	reflect "reflect"
	time "time"

	packet "github.com/BAN1ce/skyTree/pkg/packet"
	gomock "github.com/golang/mock/gomock"
)

// MockPublishElement is a mock of PublishElement interface.
type MockPublishElement struct {
	ctrl     *gomock.Controller
	recorder *MockPublishElementMockRecorder
}

// MockPublishElementMockRecorder is the mock recorder for MockPublishElement.
type MockPublishElementMockRecorder struct {
	mock *MockPublishElement
}

// NewMockPublishElement creates a new mock instance.
func NewMockPublishElement(ctrl *gomock.Controller) *MockPublishElement {
	mock := &MockPublishElement{ctrl: ctrl}
	mock.recorder = &MockPublishElementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublishElement) EXPECT() *MockPublishElementMockRecorder {
	return m.recorder
}

// GetContentType mocks base method.
func (m *MockPublishElement) GetContentType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetContentType indicates an expected call of GetContentType.
func (mr *MockPublishElementMockRecorder) GetContentType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentType", reflect.TypeOf((*MockPublishElement)(nil).GetContentType))
}

// GetQos mocks base method.
func (m *MockPublishElement) GetQos() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQos")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetQos indicates an expected call of GetQos.
func (mr *MockPublishElementMockRecorder) GetQos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQos", reflect.TypeOf((*MockPublishElement)(nil).GetQos))
}

// GetResponseTopic mocks base method.
func (m *MockPublishElement) GetResponseTopic() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseTopic")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetResponseTopic indicates an expected call of GetResponseTopic.
func (mr *MockPublishElementMockRecorder) GetResponseTopic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseTopic", reflect.TypeOf((*MockPublishElement)(nil).GetResponseTopic))
}

// GetTopic mocks base method.
func (m *MockPublishElement) GetTopic() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopic")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTopic indicates an expected call of GetTopic.
func (mr *MockPublishElementMockRecorder) GetTopic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopic", reflect.TypeOf((*MockPublishElement)(nil).GetTopic))
}

// MockMessageStore is a mock of MessageStore interface.
type MockMessageStore struct {
	ctrl     *gomock.Controller
	recorder *MockMessageStoreMockRecorder
}

// MockMessageStoreMockRecorder is the mock recorder for MockMessageStore.
type MockMessageStoreMockRecorder struct {
	mock *MockMessageStore
}

// NewMockMessageStore creates a new mock instance.
func NewMockMessageStore(ctrl *gomock.Controller) *MockMessageStore {
	mock := &MockMessageStore{ctrl: ctrl}
	mock.recorder = &MockMessageStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageStore) EXPECT() *MockMessageStoreMockRecorder {
	return m.recorder
}

// CreatePacket mocks base method.
func (m *MockMessageStore) CreatePacket(topic string, value []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePacket", topic, value)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePacket indicates an expected call of CreatePacket.
func (mr *MockMessageStoreMockRecorder) CreatePacket(topic, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePacket", reflect.TypeOf((*MockMessageStore)(nil).CreatePacket), topic, value)
}

// DeleteTopicMessageID mocks base method.
func (m *MockMessageStore) DeleteTopicMessageID(ctx context.Context, topic, messageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopicMessageID", ctx, topic, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTopicMessageID indicates an expected call of DeleteTopicMessageID.
func (mr *MockMessageStoreMockRecorder) DeleteTopicMessageID(ctx, topic, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicMessageID", reflect.TypeOf((*MockMessageStore)(nil).DeleteTopicMessageID), ctx, topic, messageID)
}

// ReadFromTimestamp mocks base method.
func (m *MockMessageStore) ReadFromTimestamp(ctx context.Context, topic string, timestamp time.Time, limit int) ([]*packet.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromTimestamp", ctx, topic, timestamp, limit)
	ret0, _ := ret[0].([]*packet.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFromTimestamp indicates an expected call of ReadFromTimestamp.
func (mr *MockMessageStoreMockRecorder) ReadFromTimestamp(ctx, topic, timestamp, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromTimestamp", reflect.TypeOf((*MockMessageStore)(nil).ReadFromTimestamp), ctx, topic, timestamp, limit)
}

// ReadTopicMessagesByID mocks base method.
func (m *MockMessageStore) ReadTopicMessagesByID(ctx context.Context, topic, id string, limit int, include bool) ([]*packet.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTopicMessagesByID", ctx, topic, id, limit, include)
	ret0, _ := ret[0].([]*packet.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTopicMessagesByID indicates an expected call of ReadTopicMessagesByID.
func (mr *MockMessageStoreMockRecorder) ReadTopicMessagesByID(ctx, topic, id, limit, include interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTopicMessagesByID", reflect.TypeOf((*MockMessageStore)(nil).ReadTopicMessagesByID), ctx, topic, id, limit, include)
}

// MockTopicStoreInfo is a mock of TopicStoreInfo interface.
type MockTopicStoreInfo struct {
	ctrl     *gomock.Controller
	recorder *MockTopicStoreInfoMockRecorder
}

// MockTopicStoreInfoMockRecorder is the mock recorder for MockTopicStoreInfo.
type MockTopicStoreInfoMockRecorder struct {
	mock *MockTopicStoreInfo
}

// NewMockTopicStoreInfo creates a new mock instance.
func NewMockTopicStoreInfo(ctrl *gomock.Controller) *MockTopicStoreInfo {
	mock := &MockTopicStoreInfo{ctrl: ctrl}
	mock.recorder = &MockTopicStoreInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicStoreInfo) EXPECT() *MockTopicStoreInfoMockRecorder {
	return m.recorder
}

// DeleteTopicMessages mocks base method.
func (m *MockTopicStoreInfo) DeleteTopicMessages(ctx context.Context, topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopicMessages", ctx, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTopicMessages indicates an expected call of DeleteTopicMessages.
func (mr *MockTopicStoreInfoMockRecorder) DeleteTopicMessages(ctx, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicMessages", reflect.TypeOf((*MockTopicStoreInfo)(nil).DeleteTopicMessages), ctx, topic)
}

// GetTopicMessageTotalCount mocks base method.
func (m *MockTopicStoreInfo) GetTopicMessageTotalCount(ctx context.Context, topic string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicMessageTotalCount", ctx, topic)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicMessageTotalCount indicates an expected call of GetTopicMessageTotalCount.
func (mr *MockTopicStoreInfoMockRecorder) GetTopicMessageTotalCount(ctx, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicMessageTotalCount", reflect.TypeOf((*MockTopicStoreInfo)(nil).GetTopicMessageTotalCount), ctx, topic)
}

// MockTopicMessageStore is a mock of TopicMessageStore interface.
type MockTopicMessageStore struct {
	ctrl     *gomock.Controller
	recorder *MockTopicMessageStoreMockRecorder
}

// MockTopicMessageStoreMockRecorder is the mock recorder for MockTopicMessageStore.
type MockTopicMessageStoreMockRecorder struct {
	mock *MockTopicMessageStore
}

// NewMockTopicMessageStore creates a new mock instance.
func NewMockTopicMessageStore(ctrl *gomock.Controller) *MockTopicMessageStore {
	mock := &MockTopicMessageStore{ctrl: ctrl}
	mock.recorder = &MockTopicMessageStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicMessageStore) EXPECT() *MockTopicMessageStoreMockRecorder {
	return m.recorder
}

// CreatePacket mocks base method.
func (m *MockTopicMessageStore) CreatePacket(topic string, value []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePacket", topic, value)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePacket indicates an expected call of CreatePacket.
func (mr *MockTopicMessageStoreMockRecorder) CreatePacket(topic, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePacket", reflect.TypeOf((*MockTopicMessageStore)(nil).CreatePacket), topic, value)
}

// DeleteTopicMessageID mocks base method.
func (m *MockTopicMessageStore) DeleteTopicMessageID(ctx context.Context, topic, messageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopicMessageID", ctx, topic, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTopicMessageID indicates an expected call of DeleteTopicMessageID.
func (mr *MockTopicMessageStoreMockRecorder) DeleteTopicMessageID(ctx, topic, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicMessageID", reflect.TypeOf((*MockTopicMessageStore)(nil).DeleteTopicMessageID), ctx, topic, messageID)
}

// ReadFromTimestamp mocks base method.
func (m *MockTopicMessageStore) ReadFromTimestamp(ctx context.Context, topic string, timestamp time.Time, limit int) ([]*packet.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromTimestamp", ctx, topic, timestamp, limit)
	ret0, _ := ret[0].([]*packet.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFromTimestamp indicates an expected call of ReadFromTimestamp.
func (mr *MockTopicMessageStoreMockRecorder) ReadFromTimestamp(ctx, topic, timestamp, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromTimestamp", reflect.TypeOf((*MockTopicMessageStore)(nil).ReadFromTimestamp), ctx, topic, timestamp, limit)
}

// ReadTopicMessagesByID mocks base method.
func (m *MockTopicMessageStore) ReadTopicMessagesByID(ctx context.Context, topic, id string, limit int, include bool) ([]*packet.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTopicMessagesByID", ctx, topic, id, limit, include)
	ret0, _ := ret[0].([]*packet.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTopicMessagesByID indicates an expected call of ReadTopicMessagesByID.
func (mr *MockTopicMessageStoreMockRecorder) ReadTopicMessagesByID(ctx, topic, id, limit, include interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTopicMessagesByID", reflect.TypeOf((*MockTopicMessageStore)(nil).ReadTopicMessagesByID), ctx, topic, id, limit, include)
}

// MockStoreSerializer is a mock of StoreSerializer interface.
type MockStoreSerializer struct {
	ctrl     *gomock.Controller
	recorder *MockStoreSerializerMockRecorder
}

// MockStoreSerializerMockRecorder is the mock recorder for MockStoreSerializer.
type MockStoreSerializerMockRecorder struct {
	mock *MockStoreSerializer
}

// NewMockStoreSerializer creates a new mock instance.
func NewMockStoreSerializer(ctrl *gomock.Controller) *MockStoreSerializer {
	mock := &MockStoreSerializer{ctrl: ctrl}
	mock.recorder = &MockStoreSerializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreSerializer) EXPECT() *MockStoreSerializerMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockStoreSerializer) Decode(rawData []byte) (*packet.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", rawData)
	ret0, _ := ret[0].(*packet.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockStoreSerializerMockRecorder) Decode(rawData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockStoreSerializer)(nil).Decode), rawData)
}

// Encode mocks base method.
func (m *MockStoreSerializer) Encode(publish *packet.Message, buf *bytes.Buffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", publish, buf)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encode indicates an expected call of Encode.
func (mr *MockStoreSerializerMockRecorder) Encode(publish, buf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockStoreSerializer)(nil).Encode), publish, buf)
}
