// Code generated by MockGen. DO NOT EDIT.
// Source: .//broker/share_topic.go

// Package broker is a generated GoMock package.
package broker

import (
	context "context"
	reflect "reflect"

	broker "github.com/BAN1ce/skyTree/pkg/broker"
	client "github.com/BAN1ce/skyTree/pkg/broker/client"
	topic "github.com/BAN1ce/skyTree/pkg/broker/topic"
	packet "github.com/BAN1ce/skyTree/pkg/packet"
	packets "github.com/eclipse/paho.golang/packets"
	gomock "github.com/golang/mock/gomock"
)

// MockShareClient is a mock of ShareClient interface.
type MockShareClient struct {
	ctrl     *gomock.Controller
	recorder *MockShareClientMockRecorder
}

// MockShareClientMockRecorder is the mock recorder for MockShareClient.
type MockShareClientMockRecorder struct {
	mock *MockShareClient
}

// NewMockShareClient creates a new mock instance.
func NewMockShareClient(ctrl *gomock.Controller) *MockShareClient {
	mock := &MockShareClient{ctrl: ctrl}
	mock.recorder = &MockShareClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShareClient) EXPECT() *MockShareClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockShareClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockShareClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockShareClient)(nil).Close))
}

// GetID mocks base method.
func (m *MockShareClient) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockShareClientMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockShareClient)(nil).GetID))
}

// NextPacketID mocks base method.
func (m *MockShareClient) NextPacketID() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextPacketID")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// NextPacketID indicates an expected call of NextPacketID.
func (mr *MockShareClientMockRecorder) NextPacketID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPacketID", reflect.TypeOf((*MockShareClient)(nil).NextPacketID))
}

// RetryWrite mocks base method.
func (m *MockShareClient) RetryWrite(packet *client.WritePacket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryWrite", packet)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetryWrite indicates an expected call of RetryWrite.
func (mr *MockShareClientMockRecorder) RetryWrite(packet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryWrite", reflect.TypeOf((*MockShareClient)(nil).RetryWrite), packet)
}

// Write mocks base method.
func (m *MockShareClient) Write(packet *client.WritePacket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", packet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockShareClientMockRecorder) Write(packet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockShareClient)(nil).Write), packet)
}

// MockShareTopicManager is a mock of ShareTopicManager interface.
type MockShareTopicManager struct {
	ctrl     *gomock.Controller
	recorder *MockShareTopicManagerMockRecorder
}

// MockShareTopicManagerMockRecorder is the mock recorder for MockShareTopicManager.
type MockShareTopicManagerMockRecorder struct {
	mock *MockShareTopicManager
}

// NewMockShareTopicManager creates a new mock instance.
func NewMockShareTopicManager(ctrl *gomock.Controller) *MockShareTopicManager {
	mock := &MockShareTopicManager{ctrl: ctrl}
	mock.recorder = &MockShareTopicManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShareTopicManager) EXPECT() *MockShareTopicManagerMockRecorder {
	return m.recorder
}

// CreateShareTopic mocks base method.
func (m *MockShareTopicManager) CreateShareTopic(topic string) (broker.ShareTopic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShareTopic", topic)
	ret0, _ := ret[0].(broker.ShareTopic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShareTopic indicates an expected call of CreateShareTopic.
func (mr *MockShareTopicManagerMockRecorder) CreateShareTopic(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShareTopic", reflect.TypeOf((*MockShareTopicManager)(nil).CreateShareTopic), topic)
}

// DeleteShareTopic mocks base method.
func (m *MockShareTopicManager) DeleteShareTopic(topic string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteShareTopic", topic)
}

// DeleteShareTopic indicates an expected call of DeleteShareTopic.
func (mr *MockShareTopicManagerMockRecorder) DeleteShareTopic(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShareTopic", reflect.TypeOf((*MockShareTopicManager)(nil).DeleteShareTopic), topic)
}

// MockShareTopic is a mock of ShareTopic interface.
type MockShareTopic struct {
	ctrl     *gomock.Controller
	recorder *MockShareTopicMockRecorder
}

// MockShareTopicMockRecorder is the mock recorder for MockShareTopic.
type MockShareTopicMockRecorder struct {
	mock *MockShareTopic
}

// NewMockShareTopic creates a new mock instance.
func NewMockShareTopic(ctrl *gomock.Controller) *MockShareTopic {
	mock := &MockShareTopic{ctrl: ctrl}
	mock.recorder = &MockShareTopicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShareTopic) EXPECT() *MockShareTopicMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockShareTopic) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockShareTopicMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockShareTopic)(nil).Close))
}

// GetUnFinishedMessage mocks base method.
func (m *MockShareTopic) GetUnFinishedMessage() []*packet.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnFinishedMessage")
	ret0, _ := ret[0].([]*packet.Message)
	return ret0
}

// GetUnFinishedMessage indicates an expected call of GetUnFinishedMessage.
func (mr *MockShareTopicMockRecorder) GetUnFinishedMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnFinishedMessage", reflect.TypeOf((*MockShareTopic)(nil).GetUnFinishedMessage))
}

// Meta mocks base method.
func (m *MockShareTopic) Meta() *topic.Meta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(*topic.Meta)
	return ret0
}

// Meta indicates an expected call of Meta.
func (mr *MockShareTopicMockRecorder) Meta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockShareTopic)(nil).Meta))
}

// Publish mocks base method.
func (m *MockShareTopic) Publish(publish *packet.Message, extra *packet.MessageExtraInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", publish, extra)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockShareTopicMockRecorder) Publish(publish, extra interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockShareTopic)(nil).Publish), publish, extra)
}

// ShareTopicAddClient mocks base method.
func (m *MockShareTopic) ShareTopicAddClient(client broker.ShareClient, qos broker.QoS) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShareTopicAddClient", client, qos)
}

// ShareTopicAddClient indicates an expected call of ShareTopicAddClient.
func (mr *MockShareTopicMockRecorder) ShareTopicAddClient(client, qos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareTopicAddClient", reflect.TypeOf((*MockShareTopic)(nil).ShareTopicAddClient), client, qos)
}

// ShareTopicRemoveClient mocks base method.
func (m *MockShareTopic) ShareTopicRemoveClient(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShareTopicRemoveClient", id)
}

// ShareTopicRemoveClient indicates an expected call of ShareTopicRemoveClient.
func (mr *MockShareTopicMockRecorder) ShareTopicRemoveClient(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareTopicRemoveClient", reflect.TypeOf((*MockShareTopic)(nil).ShareTopicRemoveClient), id)
}

// Start mocks base method.
func (m *MockShareTopic) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockShareTopicMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockShareTopic)(nil).Start), ctx)
}

// MockShareTopicQoS1 is a mock of ShareTopicQoS1 interface.
type MockShareTopicQoS1 struct {
	ctrl     *gomock.Controller
	recorder *MockShareTopicQoS1MockRecorder
}

// MockShareTopicQoS1MockRecorder is the mock recorder for MockShareTopicQoS1.
type MockShareTopicQoS1MockRecorder struct {
	mock *MockShareTopicQoS1
}

// NewMockShareTopicQoS1 creates a new mock instance.
func NewMockShareTopicQoS1(ctrl *gomock.Controller) *MockShareTopicQoS1 {
	mock := &MockShareTopicQoS1{ctrl: ctrl}
	mock.recorder = &MockShareTopicQoS1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShareTopicQoS1) EXPECT() *MockShareTopicQoS1MockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockShareTopicQoS1) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockShareTopicQoS1MockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockShareTopicQoS1)(nil).Close))
}

// GetUnFinishedMessage mocks base method.
func (m *MockShareTopicQoS1) GetUnFinishedMessage() []*packet.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnFinishedMessage")
	ret0, _ := ret[0].([]*packet.Message)
	return ret0
}

// GetUnFinishedMessage indicates an expected call of GetUnFinishedMessage.
func (mr *MockShareTopicQoS1MockRecorder) GetUnFinishedMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnFinishedMessage", reflect.TypeOf((*MockShareTopicQoS1)(nil).GetUnFinishedMessage))
}

// HandlePublishAck mocks base method.
func (m *MockShareTopicQoS1) HandlePublishAck(puback *packets.Puback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePublishAck", puback)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandlePublishAck indicates an expected call of HandlePublishAck.
func (mr *MockShareTopicQoS1MockRecorder) HandlePublishAck(puback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePublishAck", reflect.TypeOf((*MockShareTopicQoS1)(nil).HandlePublishAck), puback)
}

// Meta mocks base method.
func (m *MockShareTopicQoS1) Meta() *topic.Meta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(*topic.Meta)
	return ret0
}

// Meta indicates an expected call of Meta.
func (mr *MockShareTopicQoS1MockRecorder) Meta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockShareTopicQoS1)(nil).Meta))
}

// Publish mocks base method.
func (m *MockShareTopicQoS1) Publish(publish *packet.Message, extra *packet.MessageExtraInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", publish, extra)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockShareTopicQoS1MockRecorder) Publish(publish, extra interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockShareTopicQoS1)(nil).Publish), publish, extra)
}

// ShareTopicAddClient mocks base method.
func (m *MockShareTopicQoS1) ShareTopicAddClient(client broker.ShareClient, qos broker.QoS) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShareTopicAddClient", client, qos)
}

// ShareTopicAddClient indicates an expected call of ShareTopicAddClient.
func (mr *MockShareTopicQoS1MockRecorder) ShareTopicAddClient(client, qos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareTopicAddClient", reflect.TypeOf((*MockShareTopicQoS1)(nil).ShareTopicAddClient), client, qos)
}

// ShareTopicRemoveClient mocks base method.
func (m *MockShareTopicQoS1) ShareTopicRemoveClient(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShareTopicRemoveClient", id)
}

// ShareTopicRemoveClient indicates an expected call of ShareTopicRemoveClient.
func (mr *MockShareTopicQoS1MockRecorder) ShareTopicRemoveClient(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareTopicRemoveClient", reflect.TypeOf((*MockShareTopicQoS1)(nil).ShareTopicRemoveClient), id)
}

// Start mocks base method.
func (m *MockShareTopicQoS1) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockShareTopicQoS1MockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockShareTopicQoS1)(nil).Start), ctx)
}

// MockShareTopicQoS2 is a mock of ShareTopicQoS2 interface.
type MockShareTopicQoS2 struct {
	ctrl     *gomock.Controller
	recorder *MockShareTopicQoS2MockRecorder
}

// MockShareTopicQoS2MockRecorder is the mock recorder for MockShareTopicQoS2.
type MockShareTopicQoS2MockRecorder struct {
	mock *MockShareTopicQoS2
}

// NewMockShareTopicQoS2 creates a new mock instance.
func NewMockShareTopicQoS2(ctrl *gomock.Controller) *MockShareTopicQoS2 {
	mock := &MockShareTopicQoS2{ctrl: ctrl}
	mock.recorder = &MockShareTopicQoS2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShareTopicQoS2) EXPECT() *MockShareTopicQoS2MockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockShareTopicQoS2) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockShareTopicQoS2MockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockShareTopicQoS2)(nil).Close))
}

// GetUnFinishedMessage mocks base method.
func (m *MockShareTopicQoS2) GetUnFinishedMessage() []*packet.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnFinishedMessage")
	ret0, _ := ret[0].([]*packet.Message)
	return ret0
}

// GetUnFinishedMessage indicates an expected call of GetUnFinishedMessage.
func (mr *MockShareTopicQoS2MockRecorder) GetUnFinishedMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnFinishedMessage", reflect.TypeOf((*MockShareTopicQoS2)(nil).GetUnFinishedMessage))
}

// HandlePublishComp mocks base method.
func (m *MockShareTopicQoS2) HandlePublishComp(pubcomp *packets.Pubcomp) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandlePublishComp", pubcomp)
}

// HandlePublishComp indicates an expected call of HandlePublishComp.
func (mr *MockShareTopicQoS2MockRecorder) HandlePublishComp(pubcomp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePublishComp", reflect.TypeOf((*MockShareTopicQoS2)(nil).HandlePublishComp), pubcomp)
}

// HandlePublishRec mocks base method.
func (m *MockShareTopicQoS2) HandlePublishRec(pubrec *packets.Pubrec) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandlePublishRec", pubrec)
}

// HandlePublishRec indicates an expected call of HandlePublishRec.
func (mr *MockShareTopicQoS2MockRecorder) HandlePublishRec(pubrec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePublishRec", reflect.TypeOf((*MockShareTopicQoS2)(nil).HandlePublishRec), pubrec)
}

// Meta mocks base method.
func (m *MockShareTopicQoS2) Meta() *topic.Meta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(*topic.Meta)
	return ret0
}

// Meta indicates an expected call of Meta.
func (mr *MockShareTopicQoS2MockRecorder) Meta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockShareTopicQoS2)(nil).Meta))
}

// Publish mocks base method.
func (m *MockShareTopicQoS2) Publish(publish *packet.Message, extra *packet.MessageExtraInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", publish, extra)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockShareTopicQoS2MockRecorder) Publish(publish, extra interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockShareTopicQoS2)(nil).Publish), publish, extra)
}

// ShareTopicAddClient mocks base method.
func (m *MockShareTopicQoS2) ShareTopicAddClient(client broker.ShareClient, qos broker.QoS) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShareTopicAddClient", client, qos)
}

// ShareTopicAddClient indicates an expected call of ShareTopicAddClient.
func (mr *MockShareTopicQoS2MockRecorder) ShareTopicAddClient(client, qos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareTopicAddClient", reflect.TypeOf((*MockShareTopicQoS2)(nil).ShareTopicAddClient), client, qos)
}

// ShareTopicRemoveClient mocks base method.
func (m *MockShareTopicQoS2) ShareTopicRemoveClient(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShareTopicRemoveClient", id)
}

// ShareTopicRemoveClient indicates an expected call of ShareTopicRemoveClient.
func (mr *MockShareTopicQoS2MockRecorder) ShareTopicRemoveClient(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareTopicRemoveClient", reflect.TypeOf((*MockShareTopicQoS2)(nil).ShareTopicRemoveClient), id)
}

// Start mocks base method.
func (m *MockShareTopicQoS2) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockShareTopicQoS2MockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockShareTopicQoS2)(nil).Start), ctx)
}

// MockShareTopics is a mock of ShareTopics interface.
type MockShareTopics struct {
	ctrl     *gomock.Controller
	recorder *MockShareTopicsMockRecorder
}

// MockShareTopicsMockRecorder is the mock recorder for MockShareTopics.
type MockShareTopicsMockRecorder struct {
	mock *MockShareTopics
}

// NewMockShareTopics creates a new mock instance.
func NewMockShareTopics(ctrl *gomock.Controller) *MockShareTopics {
	mock := &MockShareTopics{ctrl: ctrl}
	mock.recorder = &MockShareTopicsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShareTopics) EXPECT() *MockShareTopicsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockShareTopics) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockShareTopicsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockShareTopics)(nil).Close))
}

// Sub mocks base method.
func (m *MockShareTopics) Sub(options packets.SubOptions, client broker.ShareClient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sub", options, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sub indicates an expected call of Sub.
func (mr *MockShareTopicsMockRecorder) Sub(options, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sub", reflect.TypeOf((*MockShareTopics)(nil).Sub), options, client)
}

// UnSub mocks base method.
func (m *MockShareTopics) UnSub(topic, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSub", topic, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnSub indicates an expected call of UnSub.
func (mr *MockShareTopicsMockRecorder) UnSub(topic, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSub", reflect.TypeOf((*MockShareTopics)(nil).UnSub), topic, clientID)
}
