// Code generated by MockGen. DO NOT EDIT.
// Source: .//broker/client/client.go

// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	client "github.com/BAN1ce/skyTree/pkg/broker/client"
	packet "github.com/BAN1ce/skyTree/pkg/packet"
	packets "github.com/eclipse/paho.golang/packets"
	gomock "github.com/golang/mock/gomock"
)

// MockID is a mock of ID interface.
type MockID struct {
	ctrl     *gomock.Controller
	recorder *MockIDMockRecorder
}

// MockIDMockRecorder is the mock recorder for MockID.
type MockIDMockRecorder struct {
	mock *MockID
}

// NewMockID creates a new mock instance.
func NewMockID(ctrl *gomock.Controller) *MockID {
	mock := &MockID{ctrl: ctrl}
	mock.recorder = &MockIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockID) EXPECT() *MockIDMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockID) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockIDMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockID)(nil).GetID))
}

// MockPacketIDGenerator is a mock of PacketIDGenerator interface.
type MockPacketIDGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockPacketIDGeneratorMockRecorder
}

// MockPacketIDGeneratorMockRecorder is the mock recorder for MockPacketIDGenerator.
type MockPacketIDGeneratorMockRecorder struct {
	mock *MockPacketIDGenerator
}

// NewMockPacketIDGenerator creates a new mock instance.
func NewMockPacketIDGenerator(ctrl *gomock.Controller) *MockPacketIDGenerator {
	mock := &MockPacketIDGenerator{ctrl: ctrl}
	mock.recorder = &MockPacketIDGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacketIDGenerator) EXPECT() *MockPacketIDGeneratorMockRecorder {
	return m.recorder
}

// NextPacketID mocks base method.
func (m *MockPacketIDGenerator) NextPacketID() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextPacketID")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// NextPacketID indicates an expected call of NextPacketID.
func (mr *MockPacketIDGeneratorMockRecorder) NextPacketID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPacketID", reflect.TypeOf((*MockPacketIDGenerator)(nil).NextPacketID))
}

// MockPacketWriter is a mock of PacketWriter interface.
type MockPacketWriter struct {
	ctrl     *gomock.Controller
	recorder *MockPacketWriterMockRecorder
}

// MockPacketWriterMockRecorder is the mock recorder for MockPacketWriter.
type MockPacketWriterMockRecorder struct {
	mock *MockPacketWriter
}

// NewMockPacketWriter creates a new mock instance.
func NewMockPacketWriter(ctrl *gomock.Controller) *MockPacketWriter {
	mock := &MockPacketWriter{ctrl: ctrl}
	mock.recorder = &MockPacketWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacketWriter) EXPECT() *MockPacketWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPacketWriter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPacketWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPacketWriter)(nil).Close))
}

// GetID mocks base method.
func (m *MockPacketWriter) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockPacketWriterMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockPacketWriter)(nil).GetID))
}

// NextPacketID mocks base method.
func (m *MockPacketWriter) NextPacketID() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextPacketID")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// NextPacketID indicates an expected call of NextPacketID.
func (mr *MockPacketWriterMockRecorder) NextPacketID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPacketID", reflect.TypeOf((*MockPacketWriter)(nil).NextPacketID))
}

// WritePacket mocks base method.
func (m *MockPacketWriter) WritePacket(packet *client.WritePacket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritePacket", packet)
	ret0, _ := ret[0].(error)
	return ret0
}

// WritePacket indicates an expected call of WritePacket.
func (mr *MockPacketWriterMockRecorder) WritePacket(packet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePacket", reflect.TypeOf((*MockPacketWriter)(nil).WritePacket), packet)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetPacketWriter mocks base method.
func (m *MockClient) GetPacketWriter() client.PacketWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPacketWriter")
	ret0, _ := ret[0].(client.PacketWriter)
	return ret0
}

// GetPacketWriter indicates an expected call of GetPacketWriter.
func (mr *MockClientMockRecorder) GetPacketWriter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPacketWriter", reflect.TypeOf((*MockClient)(nil).GetPacketWriter))
}

// GetUnFinishedMessage mocks base method.
func (m *MockClient) GetUnFinishedMessage() []*packet.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnFinishedMessage")
	ret0, _ := ret[0].([]*packet.Message)
	return ret0
}

// GetUnFinishedMessage indicates an expected call of GetUnFinishedMessage.
func (mr *MockClientMockRecorder) GetUnFinishedMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnFinishedMessage", reflect.TypeOf((*MockClient)(nil).GetUnFinishedMessage))
}

// HandelPublishComp mocks base method.
func (m *MockClient) HandelPublishComp(pubComp *packets.Pubcomp) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandelPublishComp", pubComp)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandelPublishComp indicates an expected call of HandelPublishComp.
func (mr *MockClientMockRecorder) HandelPublishComp(pubComp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandelPublishComp", reflect.TypeOf((*MockClient)(nil).HandelPublishComp), pubComp)
}

// HandlePublishAck mocks base method.
func (m *MockClient) HandlePublishAck(pubAck *packets.Puback) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePublishAck", pubAck)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandlePublishAck indicates an expected call of HandlePublishAck.
func (mr *MockClientMockRecorder) HandlePublishAck(pubAck interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePublishAck", reflect.TypeOf((*MockClient)(nil).HandlePublishAck), pubAck)
}

// HandlePublishRec mocks base method.
func (m *MockClient) HandlePublishRec(pubRec *packets.Pubrec) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePublishRec", pubRec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandlePublishRec indicates an expected call of HandlePublishRec.
func (mr *MockClientMockRecorder) HandlePublishRec(pubRec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePublishRec", reflect.TypeOf((*MockClient)(nil).HandlePublishRec), pubRec)
}

// PubRel mocks base method.
func (m *MockClient) PubRel(message *packet.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubRel", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// PubRel indicates an expected call of PubRel.
func (mr *MockClientMockRecorder) PubRel(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubRel", reflect.TypeOf((*MockClient)(nil).PubRel), message)
}

// Publish mocks base method.
func (m *MockClient) Publish(publish *packet.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", publish)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockClientMockRecorder) Publish(publish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockClient)(nil).Publish), publish)
}

// MockHandlePublishResponse is a mock of HandlePublishResponse interface.
type MockHandlePublishResponse struct {
	ctrl     *gomock.Controller
	recorder *MockHandlePublishResponseMockRecorder
}

// MockHandlePublishResponseMockRecorder is the mock recorder for MockHandlePublishResponse.
type MockHandlePublishResponseMockRecorder struct {
	mock *MockHandlePublishResponse
}

// NewMockHandlePublishResponse creates a new mock instance.
func NewMockHandlePublishResponse(ctrl *gomock.Controller) *MockHandlePublishResponse {
	mock := &MockHandlePublishResponse{ctrl: ctrl}
	mock.recorder = &MockHandlePublishResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlePublishResponse) EXPECT() *MockHandlePublishResponseMockRecorder {
	return m.recorder
}

// HandelPublishComp mocks base method.
func (m *MockHandlePublishResponse) HandelPublishComp(pubComp *packets.Pubcomp) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandelPublishComp", pubComp)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandelPublishComp indicates an expected call of HandelPublishComp.
func (mr *MockHandlePublishResponseMockRecorder) HandelPublishComp(pubComp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandelPublishComp", reflect.TypeOf((*MockHandlePublishResponse)(nil).HandelPublishComp), pubComp)
}

// HandlePublishAck mocks base method.
func (m *MockHandlePublishResponse) HandlePublishAck(pubAck *packets.Puback) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePublishAck", pubAck)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandlePublishAck indicates an expected call of HandlePublishAck.
func (mr *MockHandlePublishResponseMockRecorder) HandlePublishAck(pubAck interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePublishAck", reflect.TypeOf((*MockHandlePublishResponse)(nil).HandlePublishAck), pubAck)
}

// HandlePublishRec mocks base method.
func (m *MockHandlePublishResponse) HandlePublishRec(pubRec *packets.Pubrec) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePublishRec", pubRec)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandlePublishRec indicates an expected call of HandlePublishRec.
func (mr *MockHandlePublishResponseMockRecorder) HandlePublishRec(pubRec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePublishRec", reflect.TypeOf((*MockHandlePublishResponse)(nil).HandlePublishRec), pubRec)
}
