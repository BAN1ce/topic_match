// Code generated by MockGen. DO NOT EDIT.
// Source: .//event/event.go

// Package event is a generated GoMock package.
package event

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	events "github.com/kataras/go-events"
)

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// AddListener mocks base method.
func (m *MockDriver) AddListener(eventName string, listener events.Listener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddListener", eventName, listener)
}

// AddListener indicates an expected call of AddListener.
func (mr *MockDriverMockRecorder) AddListener(eventName, listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddListener", reflect.TypeOf((*MockDriver)(nil).AddListener), eventName, listener)
}

// AddListenerOnce mocks base method.
func (m *MockDriver) AddListenerOnce(eventName string, listener events.Listener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddListenerOnce", eventName, listener)
}

// AddListenerOnce indicates an expected call of AddListenerOnce.
func (mr *MockDriverMockRecorder) AddListenerOnce(eventName, listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddListenerOnce", reflect.TypeOf((*MockDriver)(nil).AddListenerOnce), eventName, listener)
}

// Emit mocks base method.
func (m *MockDriver) Emit(eventName string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{eventName}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Emit", varargs...)
}

// Emit indicates an expected call of Emit.
func (mr *MockDriverMockRecorder) Emit(eventName interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{eventName}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockDriver)(nil).Emit), varargs...)
}

// RemoveListener mocks base method.
func (m *MockDriver) RemoveListener(eventName string, listener events.Listener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveListener", eventName, listener)
}

// RemoveListener indicates an expected call of RemoveListener.
func (mr *MockDriverMockRecorder) RemoveListener(eventName, listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveListener", reflect.TypeOf((*MockDriver)(nil).RemoveListener), eventName, listener)
}

// MockdefaultListener is a mock of defaultListener interface.
type MockdefaultListener struct {
	ctrl     *gomock.Controller
	recorder *MockdefaultListenerMockRecorder
}

// MockdefaultListenerMockRecorder is the mock recorder for MockdefaultListener.
type MockdefaultListenerMockRecorder struct {
	mock *MockdefaultListener
}

// NewMockdefaultListener creates a new mock instance.
func NewMockdefaultListener(ctrl *gomock.Controller) *MockdefaultListener {
	mock := &MockdefaultListener{ctrl: ctrl}
	mock.recorder = &MockdefaultListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdefaultListener) EXPECT() *MockdefaultListenerMockRecorder {
	return m.recorder
}

// addDefaultListener mocks base method.
func (m *MockdefaultListener) addDefaultListener() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addDefaultListener")
}

// addDefaultListener indicates an expected call of addDefaultListener.
func (mr *MockdefaultListenerMockRecorder) addDefaultListener() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addDefaultListener", reflect.TypeOf((*MockdefaultListener)(nil).addDefaultListener))
}
