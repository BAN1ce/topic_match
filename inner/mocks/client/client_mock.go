// Code generated by MockGen. DO NOT EDIT.
// Source: .//broker/client/client.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	client "github.com/BAN1ce/skyTree/inner/broker/client"
	packets "github.com/eclipse/paho.golang/packets"
	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// HandlePacket mocks base method.
func (m *MockHandler) HandlePacket(arg0 context.Context, arg1 *packets.ControlPacket, arg2 *client.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePacket", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandlePacket indicates an expected call of HandlePacket.
func (mr *MockHandlerMockRecorder) HandlePacket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePacket", reflect.TypeOf((*MockHandler)(nil).HandlePacket), arg0, arg1, arg2)
}
