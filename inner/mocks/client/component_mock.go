// Code generated by MockGen. DO NOT EDIT.
// Source: .//broker/client/component.go

// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	client "github.com/BAN1ce/skyTree/inner/broker/client"
	session "github.com/BAN1ce/skyTree/pkg/broker/session"
	gomock "github.com/golang/mock/gomock"
)

// MockNotifyClientClose is a mock of NotifyClientClose interface.
type MockNotifyClientClose struct {
	ctrl     *gomock.Controller
	recorder *MockNotifyClientCloseMockRecorder
}

// MockNotifyClientCloseMockRecorder is the mock recorder for MockNotifyClientClose.
type MockNotifyClientCloseMockRecorder struct {
	mock *MockNotifyClientClose
}

// NewMockNotifyClientClose creates a new mock instance.
func NewMockNotifyClientClose(ctrl *gomock.Controller) *MockNotifyClientClose {
	mock := &MockNotifyClientClose{ctrl: ctrl}
	mock.recorder = &MockNotifyClientCloseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifyClientClose) EXPECT() *MockNotifyClientCloseMockRecorder {
	return m.recorder
}

// NotifyClientClose mocks base method.
func (m *MockNotifyClientClose) NotifyClientClose(c *client.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyClientClose", c)
}

// NotifyClientClose indicates an expected call of NotifyClientClose.
func (mr *MockNotifyClientCloseMockRecorder) NotifyClientClose(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyClientClose", reflect.TypeOf((*MockNotifyClientClose)(nil).NotifyClientClose), c)
}

// NotifyWillMessage mocks base method.
func (m *MockNotifyClientClose) NotifyWillMessage(message *session.WillMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyWillMessage", message)
}

// NotifyWillMessage indicates an expected call of NotifyWillMessage.
func (mr *MockNotifyClientCloseMockRecorder) NotifyWillMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyWillMessage", reflect.TypeOf((*MockNotifyClientClose)(nil).NotifyWillMessage), message)
}
