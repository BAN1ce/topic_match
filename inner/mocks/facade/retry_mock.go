// Code generated by MockGen. DO NOT EDIT.
// Source: .//facade/retry.go

// Package facade is a generated GoMock package.
package facade

import (
	reflect "reflect"

	retry "github.com/BAN1ce/skyTree/pkg/retry"
	gomock "github.com/golang/mock/gomock"
)

// MockRetrySchedule is a mock of RetrySchedule interface.
type MockRetrySchedule struct {
	ctrl     *gomock.Controller
	recorder *MockRetryScheduleMockRecorder
}

// MockRetryScheduleMockRecorder is the mock recorder for MockRetrySchedule.
type MockRetryScheduleMockRecorder struct {
	mock *MockRetrySchedule
}

// NewMockRetrySchedule creates a new mock instance.
func NewMockRetrySchedule(ctrl *gomock.Controller) *MockRetrySchedule {
	mock := &MockRetrySchedule{ctrl: ctrl}
	mock.recorder = &MockRetryScheduleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetrySchedule) EXPECT() *MockRetryScheduleMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRetrySchedule) Create(task *retry.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRetryScheduleMockRecorder) Create(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRetrySchedule)(nil).Create), task)
}

// Delete mocks base method.
func (m *MockRetrySchedule) Delete(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", key)
}

// Delete indicates an expected call of Delete.
func (mr *MockRetryScheduleMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRetrySchedule)(nil).Delete), key)
}
