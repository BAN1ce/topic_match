// Code generated by MockGen. DO NOT EDIT.
// Source: .//broker/core/broker.go

// Package core is a generated GoMock package.
package core

import (
	reflect "reflect"

	client "github.com/BAN1ce/skyTree/inner/broker/client"
	core "github.com/BAN1ce/skyTree/inner/broker/core"
	packets "github.com/eclipse/paho.golang/packets"
	gomock "github.com/golang/mock/gomock"
)

// MockObserver is a mock of Observer interface.
type MockObserver struct {
	ctrl     *gomock.Controller
	recorder *MockObserverMockRecorder
}

// MockObserverMockRecorder is the mock recorder for MockObserver.
type MockObserverMockRecorder struct {
	mock *MockObserver
}

// NewMockObserver creates a new mock instance.
func NewMockObserver(ctrl *gomock.Controller) *MockObserver {
	mock := &MockObserver{ctrl: ctrl}
	mock.recorder = &MockObserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObserver) EXPECT() *MockObserverMockRecorder {
	return m.recorder
}

// OnClientClose mocks base method.
func (m *MockObserver) OnClientClose(b core.Broker, c *client.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnClientClose", b, c)
}

// OnClientClose indicates an expected call of OnClientClose.
func (mr *MockObserverMockRecorder) OnClientClose(b, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnClientClose", reflect.TypeOf((*MockObserver)(nil).OnClientClose), b, c)
}

// MockbrokerHandler is a mock of brokerHandler interface.
type MockbrokerHandler struct {
	ctrl     *gomock.Controller
	recorder *MockbrokerHandlerMockRecorder
}

// MockbrokerHandlerMockRecorder is the mock recorder for MockbrokerHandler.
type MockbrokerHandlerMockRecorder struct {
	mock *MockbrokerHandler
}

// NewMockbrokerHandler creates a new mock instance.
func NewMockbrokerHandler(ctrl *gomock.Controller) *MockbrokerHandler {
	mock := &MockbrokerHandler{ctrl: ctrl}
	mock.recorder = &MockbrokerHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbrokerHandler) EXPECT() *MockbrokerHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockbrokerHandler) Handle(broker *core.Broker, client *client.Client, rawPacket *packets.ControlPacket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", broker, client, rawPacket)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockbrokerHandlerMockRecorder) Handle(broker, client, rawPacket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockbrokerHandler)(nil).Handle), broker, client, rawPacket)
}
