// Code generated by MockGen. DO NOT EDIT.
// Source: .//broker/monitor/keep_alive.go

// Package monitor is a generated GoMock package.
package monitor

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockZSet is a mock of ZSet interface.
type MockZSet struct {
	ctrl     *gomock.Controller
	recorder *MockZSetMockRecorder
}

// MockZSetMockRecorder is the mock recorder for MockZSet.
type MockZSetMockRecorder struct {
	mock *MockZSet
}

// NewMockZSet creates a new mock instance.
func NewMockZSet(ctrl *gomock.Controller) *MockZSet {
	mock := &MockZSet{ctrl: ctrl}
	mock.recorder = &MockZSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZSet) EXPECT() *MockZSetMockRecorder {
	return m.recorder
}

// ZAdd mocks base method.
func (m *MockZSet) ZAdd(ctx context.Context, key, member string, score float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZAdd", ctx, key, member, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZAdd indicates an expected call of ZAdd.
func (mr *MockZSetMockRecorder) ZAdd(ctx, key, member, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAdd", reflect.TypeOf((*MockZSet)(nil).ZAdd), ctx, key, member, score)
}

// ZDel mocks base method.
func (m *MockZSet) ZDel(ctx context.Context, key, member string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZDel", ctx, key, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZDel indicates an expected call of ZDel.
func (mr *MockZSetMockRecorder) ZDel(ctx, key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZDel", reflect.TypeOf((*MockZSet)(nil).ZDel), ctx, key, member)
}

// ZRange mocks base method.
func (m *MockZSet) ZRange(ctx context.Context, key string, start, end float64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRange", ctx, key, start, end)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRange indicates an expected call of ZRange.
func (mr *MockZSetMockRecorder) ZRange(ctx, key, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRange", reflect.TypeOf((*MockZSet)(nil).ZRange), ctx, key, start, end)
}
