// Code generated by MockGen. DO NOT EDIT.
// Source: .//broker/will/will_message.go

// Package will is a generated GoMock package.
package will

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageStore is a mock of MessageStore interface.
type MockMessageStore struct {
	ctrl     *gomock.Controller
	recorder *MockMessageStoreMockRecorder
}

// MockMessageStoreMockRecorder is the mock recorder for MockMessageStore.
type MockMessageStoreMockRecorder struct {
	mock *MockMessageStore
}

// NewMockMessageStore creates a new mock instance.
func NewMockMessageStore(ctrl *gomock.Controller) *MockMessageStore {
	mock := &MockMessageStore{ctrl: ctrl}
	mock.recorder = &MockMessageStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageStore) EXPECT() *MockMessageStoreMockRecorder {
	return m.recorder
}

// AddDelayWillTask mocks base method.
func (m *MockMessageStore) AddDelayWillTask(ctx context.Context, clientID string, triggerTime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDelayWillTask", ctx, clientID, triggerTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDelayWillTask indicates an expected call of AddDelayWillTask.
func (mr *MockMessageStoreMockRecorder) AddDelayWillTask(ctx, clientID, triggerTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDelayWillTask", reflect.TypeOf((*MockMessageStore)(nil).AddDelayWillTask), ctx, clientID, triggerTime)
}

// DeleteWillClientID mocks base method.
func (m *MockMessageStore) DeleteWillClientID(ctx context.Context, key []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteWillClientID", ctx, key)
}

// DeleteWillClientID indicates an expected call of DeleteWillClientID.
func (mr *MockMessageStoreMockRecorder) DeleteWillClientID(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWillClientID", reflect.TypeOf((*MockMessageStore)(nil).DeleteWillClientID), ctx, key)
}

// GetWillClientID mocks base method.
func (m *MockMessageStore) GetWillClientID(ctx context.Context, time time.Time) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWillClientID", ctx, time)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetWillClientID indicates an expected call of GetWillClientID.
func (mr *MockMessageStoreMockRecorder) GetWillClientID(ctx, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWillClientID", reflect.TypeOf((*MockMessageStore)(nil).GetWillClientID), ctx, time)
}
